=head1 NAME

lclass - Locking, Synchronization, and Utility Base Class for the xclass Ecosystem

=head1 SYNOPSIS

    use xclass;

    my $scalar_obj = Sc("Hello, World!");
    $scalar_obj->share_it;
    $scalar_obj->lock;
    $scalar_obj->set("New value");
    $scalar_obj->unlock;

    my $serialized = $scalar_obj->serialize;
    my $deserialized = Sc()->deserialize($serialized);

    # Using with other xclass types
    my $array_obj = Ac([1, 2, 3]);
    my $hash_obj = Hc({key => 'value'});

    # Applying functions
    $array_obj->apply(sub { $_ * 2 });

    # Event handling
    $hash_obj->on('change', sub { print "Hash changed\n" });

=head1 DESCRIPTION

The C<lclass> module serves as the foundational base class for the xclass ecosystem, providing essential methods for locking, synchronization, and utility functions. It is designed to be inherited by other specialized classes within the xclass framework, ensuring consistent functionality across the ecosystem.

=head1 METHODS

=head2 Core Methods

=over 4

=item B<_ref>

Internal method to get the reference of the stored data.

=item B<_shared>

Check if the stored reference is shared.

=item B<share_it>

Make the object shared for thread-safe operations.

=item B<_init(%options)>

Initialize the object with given options.

=back

=head2 Locking Mechanisms

=over 4

=item B<lock>

Acquire a lock on the object.

=item B<unlock>

Release the lock on the object.

=item B<sync($code, $operation_name, @args)>

Execute code in a synchronized manner.

=back

=head2 Data Manipulation

=over 4

=item B<apply($func)>

Apply a function to the object's data.

=back

=head2 Stringification

=over 4

=item B<to_string>

Convert the object to a string representation.

=back

=head2 Serialization

=over 4

=item B<serialize($format)>

Serialize the object to a specified format (default: JSON).

=item B<deserialize($serialized_data, $format)>

Deserialize data into the object.

=back

=head2 Memory Management

=over 4

=item B<memory_usage>

Get the memory usage of the object.

=item B<check_circular_refs>

Check for circular references in the object.

=back

=head2 Error Handling

=over 4

=item B<throw($message, $code)>

Throw an exception with a message and error code.

=item B<debug($message)>

Log a debug message.

=item B<try($code, $operation_name, @args)>

Execute code in a try-catch block.

=back

=head2 Comparison

=over 4

=item B<compare($other, $swap)>

Compare the object with another object.

=item B<equals($other, $swap)>

Check if the object is equal to another object.

=back

=head2 Event Handling

=over 4

=item B<on($event, $callback)>

Register a callback for an event.

=item B<trigger($event, @args)>

Trigger an event with optional arguments.

=back

=head2 Utility Methods

=over 4

=item B<is_defined>

Check if the object's reference is defined.

=item B<is_empty>

Check if the object's data is empty.

=item B<clone($clone_name)>

Create a clone of the object.

=back

=head2 Configuration and Meta-information

=over 4

=item B<version>

Get the version of lclass.

=item B<check_compatibility($required_version)>

Check if the current version is compatible with a required version.

=item B<configure(%options)>

Configure lclass options.

=back

=head2 Plugin System

=over 4

=item B<register_plugin($name, $plugin)>

Register a plugin for lclass.

=item B<use_plugin($name, @args)>

Use a registered plugin.

=back

=head1 EXPORT

The following functions can be exported:

=over 4

=item :all - Exports all functions

=item :config - Exports configuration-related functions

=item :scalar, :array, :hash, :code, :io, :glob, :ref, :thread - Exports type-specific functions

=item :meta - Exports meta-information functions

=item :advanced - Exports advanced features

=back

=head1 CONFIGURATION

Configuration options can be set using the C<configure> function or by modifying the C<%CONFIG> hash directly:

    lclass::configure(debug_level => 2, use_cache => 1);

Available options include:

=over 4

=item debug_level

=item use_cache

=item cache_strategy

=item cache_size

=item serialization_format

=item max_recursion_depth

=item enable_profiling

=item enable_async

=item security_level

=item encryption_key

=back

=head1 SEE ALSO

L<xclass>, L<sclass>, L<aclass>, L<hclass>, L<cclass>, L<iclass>, L<gclass>, L<rclass>, L<tclass>

=head1 AUTHOR

OnEhIppY, Domero Software E<lt>domerosoftware@gmail.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2024 by OnEhIppY, Domero Software

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.32.1 or,
at your option, any later version of Perl 5 you may have available.

=cut
