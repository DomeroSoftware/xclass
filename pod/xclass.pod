=head1 NAME

xclass - Core Management and Factory Class for the xclass Ecosystem

=head1 TABLE OF CONTENTS

=over 4

=item L</DESCRIPTION>

=item L</SYNOPSIS>

=item L</EXAMPLES>

=item L</METHODS>

=item L</ERROR HANDLING>

=item L</LIMITATIONS AND CAVEATS>

=item L</CONFIGURATION>

=item L</PERFORMANCE CONSIDERATIONS>

=item L</THREAD SAFETY>

=item L</COMPATIBILITY>

=item L</DEPENDENCIES>

=item L</VERSION>

=item L</SEE ALSO>

=item L</AUTHOR>

=item L</COPYRIGHT AND LICENSE>

=back

=head1 DESCRIPTION

The xclass module serves as the central hub, manager, and factory for the
entire xclass ecosystem. It provides a unified interface for creating,
managing, and interacting with various specialized classes that handle
different data types in Perl.

Key features and responsibilities of xclass include:

=over 4

=item * Class Registration and Management

=item * Instance Creation and Factory Methods

=item * Lazy Loading and Performance Optimization

=item * Configuration Management

=item * Debugging and Logging

=item * Thread Safety

=item * Error Handling

=item * Extensibility

=item * Interoperability

=back

=head2 Handling of Circular References

xclass provides built-in support for handling circular references across its ecosystem. When creating or manipulating objects, xclass automatically detects and manages circular references to prevent memory leaks and infinite recursion. This is achieved through a combination of weak references and internal bookkeeping.

Key points:
- Circular references are automatically detected during object creation and manipulation.
- Weak references are used where appropriate to break circular reference chains.
- The garbage collector is able to properly clean up objects involved in circular references.
- Users generally don't need to manually manage circular references when using xclass objects.

=head1 SYNOPSIS

    use xclass;

    # Create instances of specialized classes
    my $scalar = Sc("Hello, World!");
    my $array = Ac([1, 2, 3]);
    my $hash = Hc({ key => 'value' });

    # Use automatic type conversion
    my $converted = Xc($some_data);

    # Configure the ecosystem
    xclass::configure(lazy_loading => 0, cache_instances => 1);

    # Set debug level
    xclass::set_debug_level(2);

=head1 EXAMPLES

=head2 Basic Usage

    use xclass;

    # Create a scalar object
    my $scalar = Sc("Hello, xclass!");
    print $scalar->get, "\n";  # Outputs: Hello, xclass!

    # Create an array object
    my $array = Ac([1, 2, 3]);
    $array->push(4);
    print $array->join(", "), "\n";  # Outputs: 1, 2, 3, 4

    # Create a hash object
    my $hash = Hc({ name => "Alice", age => 30 });
    $hash->set("city", "New York");
    print $hash->get("name"), " lives in ", $hash->get("city"), "\n";
    # Outputs: Alice lives in New York

=head2 Automatic Type Conversion

    use xclass;

    sub process_data {
        my $data = shift;
        my $xdata = Xc($data);  # Automatically converts to appropriate xclass object

        if ($xdata->isa('sclass')) {
            print "Processing scalar: ", $xdata->get, "\n";
        } elsif ($xdata->isa('aclass')) {
            print "Processing array: ", $xdata->join(", "), "\n";
        } elsif ($xdata->isa('hclass')) {
            print "Processing hash: ", join(", ", $xdata->keys), "\n";
        }
    }

    process_data("Hello");  # Outputs: Processing scalar: Hello
    process_data([1, 2, 3]);  # Outputs: Processing array: 1, 2, 3
    process_data({ a => 1, b => 2 });  # Outputs: Processing hash: a, b

=head2 Thread-Safe Operations

    use xclass;
    use threads;

    my $shared_array = Ac([]);

    my @threads = map {
        threads->create(sub {
            for (1..10) {
                $shared_array->push($_);
                sleep rand();
            }
        });
    } 1..5;

    $_->join for @threads;

    print "Final array: ", $shared_array->join(", "), "\n";
    # Outputs a thread-safe, combined result of all threads

=head2 Using Code References

    use xclass;

    my $code = Cc(sub { my $x = shift; return $x * 2 });

    print $code->call(5), "\n";  # Outputs: 10

    $code->modify(sub { my $original = shift; sub { $original->(@_) + 1 } });
    print $code->call(5), "\n";  # Outputs: 11

=head2 IO Operations

    use xclass;

    my $file = Ic("example.txt");
    $file->write("Hello, xclass!");
    my $content = $file->read;
    print $content, "\n";  # Outputs: Hello, xclass!

=head2 GLOB Handling

    use xclass;

    my $glob = Gc(\*STDOUT);
    $glob->print("This goes to STDOUT\n");

=head2 General Reference Manipulation

    use xclass;

    my $ref = Rc(\[1, 2, 3]);
    print $ref->deref->[1], "\n";  # Outputs: 2

=head2 Thread Management

    use xclass;

    my $thread = Tc->new('MyApp', 'WorkerThread',
        code => sub {
            my ($self) = @_;
            while (!$self->should_stop) {
                print "Working...\n";
                $self->sleep(1);
            }
        }
    );

    $thread->start;
    sleep 5;
    $thread->stop;

=head1 METHODS

=head2 Class Registration and Management

=head3 register($type, $class)

Registers a new class in the xclass ecosystem.

    xclass::register('CUSTOM', 'MyCustomClass');

=head3 registered($type)

Checks if a type is registered.

    if (xclass::registered('SCALAR')) {
        print "SCALAR type is registered\n";
    }

=head3 class($type)

Returns the class name for a given type.

    my $class_name = xclass::class('ARRAY');

=head2 Instance Creation

=head3 create($type, @args)

Creates an instance of the specified type.

    my $array = xclass::create('ARRAY', [1, 2, 3]);

=head3 Sc(@args), Ac(@args), Hc(@args), Cc(@args), Ic(@args), Gc(@args), Rc(@args), Tc(@args)

Shorthand methods for creating instances of specific types.

    my $scalar = Sc("Hello");
    my $array = Ac([1, 2, 3]);
    my $hash = Hc({ key => 'value' });

=head3 Xc($element, @args)

Automatically converts an element to the appropriate xclass type.

    my $xobject = Xc($some_data);

=head2 Configuration and Debugging

=head3 configure(%options)

Configures the xclass ecosystem.

    xclass::configure(lazy_loading => 0, cache_instances => 1);

=head3 set_debug_level($level)

Sets the debug level for the ecosystem.

    xclass::set_debug_level(2);

=head3 debug_log($message, $level, $category)

Logs a debug message.

    xclass::debug_log("Processing data", 2, 'DATA');

=head1 ERROR HANDLING

xclass uses a centralized error handling mechanism. Errors are thrown as exceptions and can be caught using eval or try-catch constructs.

    eval {
        my $array = Ac("not an array");
    };
    if ($@) {
        print "Error: $@\n";
    }

=head1 LIMITATIONS AND CAVEATS

=over 4

=item * Performance overhead for type checking and conversion in Xc()

=item * Potential memory usage increase when caching instances

=item * Lazy loading may cause slight delays on first use of a class

=back

=head1 CONFIGURATION

Configuration options can be set using the configure() method:

=over 4

=item * lazy_loading: Enable/disable lazy loading of classes (default: 1)

=item * cache_instances: Enable/disable instance caching (default: 0)

=back

    xclass::configure(lazy_loading => 0, cache_instances => 1);

=head1 PERFORMANCE CONSIDERATIONS

=over 4

=item * Use lazy_loading => 1 for faster startup times

=item * Use cache_instances => 1 for faster repeated instance creation at the cost of memory

=item * Be mindful of debug_log usage in production environments

=back

=head1 THREAD SAFETY

xclass is designed to be thread-safe. It uses semaphores for critical sections and ensures that all operations on shared data are properly synchronized.

=head1 COMPATIBILITY

xclass requires Perl version 5.10 or higher. It is designed to work on both Unix-like systems and Windows.

=head1 DEPENDENCIES

=head2 CPAN Dependencies

=over 4

=item * v5.10 or higher

=item * threads

=item * threads::shared

=item * Thread::Semaphore

=item * Exporter

=item * Scalar::Util

=item * List::Util

=item * Time::HiRes

=item * IO::Handle

=item * Fcntl

=item * Encode

=item * Compress::Zlib

=item * File::Temp

=item * Socket

=item * Storable

=item * Data::MessagePack

=item * JSON::XS

=item * YAML::XS

=item * Storable

=item * B::Deparse

=item * Devel::Size;

=item * Devel::Cycle;

=item * Benchmark

=item * Perl::Critic;

=item * Log::Log4perl

=item * Try::Tiny

=item * Test::MemoryGrowth

=item * Test::More

=item * Test::Exception

=item * Test::Warn

=back

=head2 xclass Ecosystem Dependencies

=over 4

=item * lclass (Locking, Synchronization, and Utility)

Core utility class providing foundational methods for debugging, locking, and other general utilities. Automatically imported by all other *class modules.

=item * sclass (SCALAR)

Implements comprehensive, thread-safe operations for scalar reference manipulation.

=item * aclass (ARRAY)

Provides thread-safe, feature-rich operations for array reference manipulation.

=item * hclass (HASH)

Offers robust, thread-safe methods for hash reference operations.

=item * cclass (CODE)

Manages and manipulates code references in a thread-safe manner.

=item * iclass (IO)

Handles input/output operations in a thread-safe way, encapsulating both file system and network operations.

=item * gclass (GLOB)

Implements thread-safe operations for GLOB references.

=item * rclass (REF)

Provides a unified interface for manipulating general references.

=item * tclass (THREAD)

Offers comprehensive, thread-safe management for individual threads.

=back

=head2 Internal Dependency Structure

=over 4

=item * xclass
Depends on: All other *class modules
Role: Core management and factory class

=item * lclass
Depends on: None (base utility class)
Role: Provides core utilities to all other classes

=item * sclass, aclass, hclass, cclass, iclass, gclass, rclass
Depend on: lclass, xclass
Role: Type-specific reference handling

=item * tclass
Depends on: lclass, xclass, gclass
Role: Thread management and control

=back

=head2 Optional Extended Ecosystem Components

=over 4

=item * pclass (Thread Pool Management)
Depends on: tclass, xclass, lclass
Role: Implements an efficient thread pool management system

=item * dclass (Database Interface)
Depends on: xclass, lclass, potentially sclass, aclass, hclass
Role: Provides a thread-safe database interface

=back

Note: The xclass ecosystem is designed with lazy loading, meaning that while all these dependencies exist, they are only loaded when needed, improving startup time and memory usage for applications that don't use all components.

=head1 VERSION

Version 2.0.0

=head1 SEE ALSO

L<sclass>, L<aclass>, L<hclass>, L<cclass>, L<iclass>, L<gclass>, L<rclass>, L<tclass>, L<lclass>

=head1 AUTHOR

OnEhIppY, Domero Software <domerosoftware@gmail.com>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2024 OnEhIppY, Domero Software

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
